[ ] Write some nice comments about how to use linear types with Dupable and Consumable and UrT that makes things Monads, those are really useful. Write a blog post about it even.
[ ] Make better use of Consumable and Dupable... (linear types cleanup) (e.g. consumeUnits is just a specialisation of consume from Consumable -- change it.)
[ ] ghengin should not import Ghengin.Vulkan either. It should simply ensure
    (for now) that ghengin-core is instanced with ghengin-vulkan, but later on we
    might even delegate that responsibility to the user
[ ] Much more parallelism... both host and device (GPU)
[ ] Clean up ghengin-core and ghengin-vulkan (better utils, custom prelude and
    exports in cabal (-XNoImplicitPrelude), linear by default (-XLinearTypes, -XQualifiedDo), block args too)
[ ] Longterm: WebGPU backend + WASM GHC compilation
[ ] Ghengin.Prelude
[ ] Gigant refactor using linear types and backpack sigs for the renderer
[ ] By default, QualifiedDo and NoImplicitPrelude in ghengin-core and default to Prelude.Linear (and perhaps in ghengin-vulkan and others too)
[ ] Fix stuttering most likely due to update not being run per frame in flight
[ ] Move ghengin-package-macos to more general packaging solution
[x] Fix type errors and implement all of the logic of the camera in userland to experiment its expected feasibility
[x] Camera should be updated for every render pipeline. How to do stuff to
        either all render pipelines/all materials? Perhaps direct hooks to those places
        would be the sanest way: An answer is to use explicit references as we did.
[ ] Level editor called with flag (could perhaps toggle game inside the level editor) to move things around and change properties displayed through imgui windows
[ ] Fix segfault caused by freeing descriptor set in render pipeline
[x] Edit for all render properties instead of just material (migrate medit)
[ ] Fix Frames in Flight (completely-redo-it)
[ ] Un-built-in Transform and the push constant that pushes it
[ ] Consider moving Ghengin.Core to its own package
[x] Use `Syntatic` and compare with `InternalType` and equality instead of SizeOf
[x] Move hardcoded bindings out of render pipeline and instance it with properties instead
[ ] FIR doesn't check compatibility between vertex data and vertex shader inputs
[ ] Instance `Syntatic` to support the engine data types at the shader level
[ ] Perhaps use more efficient list-like type by default for creating meshes
[ ] Dear imgui specific render pipeline
[x] Custom descriptor set #0 through Render Pipeline constructors + edit function similar to Materials
[ ] Untangle World {-# SOURCE #-} imports by creating another module for it
[ ] Hex map tutorial series https://catlikecoding.com/unity/tutorials/hex-map/
[x] Compatible mesh constraint with working planets example
[x] Get rid of VertexArray altogether (use Storable Vector directly)?
[x] Successful packaging for macos that bundles vulkan dylibs and assets
[ ] Fix gradient and move it to another package
[x] Conditionally enable extensions required by apple silicon only on apple silicon
[-] Patch cabal-osx with more up-to-date directory structure (e.g. PkgInfo should be in Contents)
[x] Basic packaging using cabal-osx
[x] Basic Packaging/Distributing (requires item below and requires things like bundling vulkan)
[-] Resource wrapper that gets resource through special hoops depending on the system (e.g. using CoreFoundation in MacOS and iOS)
[x] Flexible Mesh types checked against pipeline
[x] Sharing RenderPackets makes mesh because multiple ones will be freed multiple times (since we don't de-duplicate meshes, but rather render all meshes in render entities agregatted by material) (reference count drop below 0)
[ ] If using MonadRender, -fspecialize-agressively might be useful, but it will probably already specialize...
[ ] Currently, if a texture or sampler is not used in a material then they aren't freed (textures and sampler are freed and reference counted through materials)
[x] Reference count Textures and Samplers
[ ] Instances for safe coercion between ImGui types and Geomancy (using unsafeCoerce :P)
[ ] Linear types for resource management
[ ] MonadRenderer to be able to call mesh creation and such from SystemT
[ ] Toon Shader
[ ] Automatically derive UISettings?
[ ] Swap chain recreation...
[x] Would it be bad having two layers of ECS (rendering + user)? <-- This wouldn't work because the user-world must also know of render packets and such, since it wants to add and manipulate them
[ ] Better solution for memory management (linear types, gc, bla bla). Right now we require shared resources (like textures) to be manually freed, while material local resources are freed by the engine.
[x] Build macos app bundles
[0] If I ever have a big enough game, processing all assets at init will be slow, and we should otherwise store the processed data in a resource manager database
[ ] Unity tutorial project

[ ] Fix GUI Gradient by removing (static) global markers
[ ] Move GUI Gradient to separate package
[c] The UISettings doesn't need the type family... wouldn't it be better to add the entity as a parameter to the PlanetSettings?
[.] Gradient GUI editor. (TODO: left align it...)

Next steps:
[x] Update UI in the imgui way instead of that terrible boolean
[x] Function to update material properties which fixes the existential issues
[x] Free all textures at the end, and material resources when the material is "removed".
[x] More flexibility picking the sampler. (Next step: would it be good to have the sampler separate from the texture and simply appear in the texture material binding?)

[x] A good hashble instance for Textures, or assign material ids with an atomic counter of sorts which would make things much easier than Hashable...
    Solution#1 Use TypeRep as a pipeline's unique identifier, and create Uniques to uniquely identify materials
[.] Compatibility between binding types (can't match dynamic binding with texture2d)
[ ] Fix second planet. Its color is probably too bright because of its minmax
    being computed from the first one bc of the mesh recreation thing. once again, we need to fix the UI.
[x] Free descriptor sets and descriptor set resources
[-] Function to update static binding value that simply writes the buffer. The static binding should have a device local buffer which is not that easily written to
[x] Use an atomic counter for the material ids? https://github.com/sergv/atomic-counter
    Solution#1
[x] Somehow (through Typeable and pattern matching on runtime on the kind of
    packet) allow to update existentials. This function should also free the mesh/or material updated before creating the new one.
[ ] Material type list doesn't have to be traversed in reverse... the first item in the list could be binding #0 without any issue
[ ] Custom lights in descriptor set #0
[x] Should the descriptor set #0 be fixed for always needed engine data? (hardcoded) always camera position, lights positions, lights types, ...
    No!! Ghengin Core removes those hardcoded bits with great success
[x] How to specify arbitrary descriptor set #0 (pipeline global data) and descriptor set #2 data (per model data).
    We've seen how, see Ghengin.Core.Render.Properties
[x] Free the discarded descriptor sets in the materials (read below) (or at least the mapped buffers)
[x] Free the materials during execution: careful they might be shared.
[x] Which UI changed? Currently we don't know and are simply updating all meshes the same
[ ] Array of textures for textures shared across mats?
[x] Q: Should I allocate a descriptor set per material? Is that common?
    A: Yes. It'll occupy some memory but it would require many many materials
    to ever reach the limit. It also makes things much simpler and fixes the
    mats not changing bug and the static binding design
[x] A 'material' function to create/update? materials which allocates the descriptor set (read below)
[x] I think I can't write the same buffer in between draw calls as it seems
both will end up with the same color. It seems as if each material needs its
own descriptor set allocated and the dynamic bindings simply write the buffers
every frame, and the static bindings don't.
[x] A function to update materials (read the one below).
[x] Nailed it: A solution to update the existential materials: I think we'll have a typeable instance (like a runtime type tag) that allows us to pattern match on the type of the material to understand what kind of material it is. Then we know the type of the material and we can safely update the property value. 
[x] Compatible must ensure all required input parameters in the shader are defined in the material
[.] Render packet data for global descriptors properties and for model descriptors properties rather than just the material properties
    (Missing mesh properties)
[x] Compatible material constraint with working planets example
[x] Materials must have a compile time size to compare with the size of the descriptors defined in the shader.
[x] Static bindings which simply choose the descriptor (set?) rather than write to it
[ ] Better scene graph implementation
[+] Use parent component, a cached world matrix?, and a wrapper api that threads entities ids.
[ ] Cache world matrix through lazy field in Transform instead of explicit calculation ?
[x] Textures to use with MinMax terrain height
[x] Complete the phong model (and try some Specular lighting)
[-] Scene graph should (polymorphically?) cull the space, and
in the visible space order meshes by pipeline and material
type. Good algorithm that sorts geometry in the best possible way for the engine
[x] Free render pipelines
[y] Should each static material have its own descriptor set which simply gets bound instead of writing always over the one created with the pipeline?
[x] Validate at compile time the meshes and materials registered for a render pipeline. (Missing: mesh validation)
[-] Scene graph (BSP, quad/octtree)
[?] Disallow non-uniform scaling so that calculating the normal in world space is simpler
[x] Who's pulling in lens? Maybe I can benefit from them if I already have to have them. (Answer: fir)
[.] Bundle descriptor sets, render passes, and pipelines into a single abstraction. (Missing: render passes)
[x] Index buffer
[-] Since for now we decide a game can ever only use one window, we could have
    the Ghengin monad propagate the window thorought the program
