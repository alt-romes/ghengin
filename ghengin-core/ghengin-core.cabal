cabal-version:      3.4

name:               ghengin-core
version:            0.1.0.0
tested-with:        GHC ==9.10.1
license:            BSD-3-Clause
license-file:       ../LICENSE
author:             romes
maintainer:         rodrigo.m.mesquita@gmail.com
category:           Graphics
build-type:         Simple
extra-doc-files:    ../CHANGELOG.md

flag dev
  default: True
  manual: True
  description: This flag controls development settings and should be manually disabled when the game is being built for release. The ghengin packaging tools will take care to set this flag to false when packaging.
               When enabled, vulkan validation layers are enabled.
               Run `cabal build -f-dev` to build with the flag disabled.
               -- Enable with -f+dev

common common-flags

  if flag(dev)
    ghc-options:
        -fno-ignore-asserts
        -- -dasm-lint
        -- -dcmm-lint
        -- -dstg-lint
        -- -g3
        -- -rtsopts -debug
        -- -fcheck-prim-bounds
        -- -fcmm-thread-sanitizer

    cpp-options:
        -DDEBUG
        -- -DDEBUG_TRACE
        -- -DTHINGS_ARE_GOING_THAT_BAD

  else
    ghc-options: -O2 -threaded
    cc-options: -O2

  ghc-options:
    -Wall
    -Wno-name-shadowing
    -Wno-partial-type-signatures

  default-extensions: UnicodeSyntax,
                      MultiParamTypeClasses,
                      NoStarIsType,
                      RankNTypes,
                      DataKinds,
                      PolyKinds,
                      GADTs,
                      ViewPatterns,
                      TypeApplications,
                      TypeFamilies,
                      ExplicitNamespaces,
                      TypeFamilyDependencies,
                      TypeOperators,
                      LambdaCase,
                      BlockArguments,
                      RecordWildCards,
                      UnboxedTuples,
                      PatternSynonyms,
                      DisambiguateRecordFields,
                      DeriveGeneric,
                      DerivingVia,
                      DerivingStrategies,
                      LinearTypes,
                      QualifiedDo,
                      QuantifiedConstraints,
                      RoleAnnotations,
                      PostfixOperators,

                      -- Use Ghengin.Core.Prelude!
                      NoImplicitPrelude,

  default-language: GHC2021

library
    import:           common-flags

    exposed-modules:  Ghengin.Core,
                      Ghengin.Core.Material,
                      Ghengin.Core.Mesh,

                      -- Moved to ghengin-core-indep until #23322 is fixed
                      -- Ghengin.Core.Mesh.Vertex,
                      -- Ghengin.Core.Type.Compatible,
                      -- Ghengin.Core.Type.Utils,
                      -- Ghengin.Core.Shader,
                      -- Ghengin.Core.Shader.Pipeline,
                      -- Ghengin.Core.Shader.Canonical,

                      Ghengin.Core.Render.Pipeline,
                      Ghengin.Core.Render.Property,
                      Ghengin.Core.Render.Packet,
                      Ghengin.Core.Render.Queue,
                      Ghengin.Core.Render

    signatures:       Ghengin.Core.Renderer,
                      Ghengin.Core.Renderer.Kernel,
                      Ghengin.Core.Renderer.DescriptorSet,
                      Ghengin.Core.Renderer.Buffer,
                      Ghengin.Core.Renderer.Pipeline,
                      Ghengin.Core.Renderer.RenderPass,
                      Ghengin.Core.Renderer.Texture,
                      Ghengin.Core.Renderer.Sampler,
                      Ghengin.Core.Renderer.Command

    -- FIR re-exports, so people can import FIR without depending on fir (it's
    -- already a transitive dependency, we simply make it easier to access)
    reexported-modules: FIR, Math.Linear, Math.Quaternion,
                        -- generics-sop, for deriving generically
                        Generics.SOP

    hs-source-dirs:   ghengin-core

    build-depends:    base >= 4.20, ghc >= 9.10,
                      fir,
                      -- TODO: NOT DEPEND ON VULKAN IN CORE
                      vulkan >= 3.26.2,
                      linear-base >= 0.4.0,
                      reference-counting,
                      os-string,

                      template-haskell,
                      containers,
                      mtl,
                      vector,
                      generics-sop,

                      gl-block,

                      ghengin-core:backend-independent-bits,
                      linear-utils,
                      constraints,

                      -- force this indirect dependency's version
                      ghc-tcplugins-extra >= 0.4.6

-- A temporary sublibrary since you can't atm import modules from the package
-- you are instantiating even if it is not an indefinite module?
-- Workaround until #23322 is fixed
library backend-independent-bits
    import:           common-flags

    visibility:       public

    exposed-modules:  Ghengin.Core.Mesh.Vertex,

                      Ghengin.Core.Type.Compatible,
                      Ghengin.Core.Type.Sized,
                      Ghengin.Core.Type.Utils,

                      Ghengin.Core.Shader,
                      Ghengin.Core.Shader.Data,
                      Ghengin.Core.Shader.Pipeline,
                      Ghengin.Core.Shader.Canonical,

                      -- New modules
                      Ghengin.Core.Prelude,
                      Ghengin.Core.Log,

    hs-source-dirs:   ghengin-core-indep

    build-depends:    base,
                      fir,
                      -- TODO: NOT DEPEND ON VULKAN IN CORE INDEP
                      vulkan,
                      linear-base,
                      reference-counting,

                      template-haskell,
                      containers,
                      vector,
                      bytestring,

                      fast-logger,

                      gl-block,
                      geomancy,
                      constraints,
                      ptrdiff,

                      linear-utils

--------------------------------------------------------------------------------
-- Backend implementations (Vulkan, for now that's all...)
--------------------------------------------------------------------------------

flag enable-culling
  default: True
  manual: True
  description: Use CULL_MODE_BACK_BIT if True, and CULL_MODE_NONE otherwise.

library vulkan
    import:           common-flags

    visibility:       public

    if flag(enable-culling)
      cpp-options: -DVULKAN_ENABLE_CULLING

    exposed-modules:  Ghengin.Vulkan.Renderer.Kernel,
                      Ghengin.Vulkan.Renderer.DescriptorSet,
                      Ghengin.Vulkan.Renderer.Buffer,
                      Ghengin.Vulkan.Renderer.Pipeline,
                      Ghengin.Vulkan.Renderer.RenderPass,
                      Ghengin.Vulkan.Renderer.Texture,

                      -- To be an instance eventually
                      Ghengin.Vulkan.Renderer,

                      -- Don't know
                      Ghengin.Vulkan.Renderer.ImmediateSubmit,
                      Ghengin.Vulkan.Renderer.Image,
                      Ghengin.Vulkan.Renderer.SwapChain,
                      Ghengin.Vulkan.Renderer.Sampler,
                      Ghengin.Vulkan.Renderer.Frame,

                      -- Should soon enough be part of the required pieces
                      Ghengin.Vulkan.Renderer.Command,
                      -- Modules that don't instance signatures
                      Ghengin.Vulkan.Renderer.Device,
                      Ghengin.Vulkan.Renderer.Device.Instance,
                      Ghengin.Vulkan.Renderer.GLFW.Window,
                      Ghengin.Vulkan.Renderer.Synchronization,

    hs-source-dirs:   ghengin-vulkan

    build-depends:    base,
                      fir,
                      vulkan,
                      GLFW-b,
                      linear-base,
                      reference-counting,
                      -- ghengin-core MISTAKE!(#23322, could we depend on ghengin-core for non-indefinite modules only?)
                      ghengin-core:backend-independent-bits,
                      gl-block,

                      -- For textures (consider adding to Core too)
                      JuicyPixels,

                      containers,
                      bytestring,
                      mtl,
                      vector,
                      linear-utils

    -- Until #23322 is fixed?
    -- Nope, also doesn't work. Perhaps we could support this sort of cyclic dependencies.
    -- mixins:           ghengin:ghengin-core requires ( Ghengin.Core.Renderer.Kernel as Ghengin.Vulkan.Renderer.Kernel
    --                                                 , Ghengin.Core.Renderer.DescriptorSet as Ghengin.Vulkan.Renderer.DescriptorSet
    --                                                 , Ghengin.Core.Renderer.Buffer as Ghengin.Vulkan.Renderer.Buffer
    --                                                 , Ghengin.Core.Renderer.Pipeline as Ghengin.Vulkan.Renderer.Pipeline
    --                                                 , Ghengin.Core.Renderer.RenderPass as Ghengin.Vulkan.Renderer.RenderPass
    --                                                 )

