signature Ghengin.Core.Renderer.Pipeline where

import GHC.TypeNats
import FIR hiding (ShaderPipeline)
import FIR.Validation.Pipeline (ValidPipelineInfo)
import qualified Data.Vector as V -- ROMES:TODO: Can we replace with Data.V.Linear?

import Ghengin.Core.Shader.Pipeline

-- other renderer details
import Ghengin.Core.Renderer.Kernel
import Ghengin.Core.Renderer.RenderPass
import Ghengin.Core.Renderer.DescriptorSet

-- TODO: Get Rid of it.
-- Make push constants automatic as part of the mesh properties (as long as it fits in the push constants)
import qualified Vulkan as Vk

data RendererPipeline (t :: PipelineType)

-- ROMES:TODO: Type data
data PipelineType = Graphics | Compute

-- import Ghengin.Vulkan.Pipeline
--     ( createGraphicsPipeline,
--       destroyPipeline,
--       PipelineConstraints,
--       VulkanPipeline )

type PipelineConstraints info top descs strides =
          ( ValidPipelineInfo info
          , '(top, descs, strides) ~ GetVertexInputInfo info
          , Known (PrimitiveTopology Nat)    top
          , Known VertexLocationDescriptions descs
          , Known BindingStrides             strides
          )

-- | Create a pipeline given a vertex shader and a fragment shader (in this
-- order)
--
-- Note that the returned vulkan pipeline must be managed in a structure that
-- ensures each pipeline renders all related items in sequence instead of
-- jumping in between pipeline
createGraphicsPipeline  :: -- (KnownDefinitions vertexdefs, KnownDefinitions fragdefs)
                        -- (CompilableProgram v, CompilableProgram f)
                        ∀  ( info    :: PipelineInfo               )
                           ( top     :: PrimitiveTopology Nat      )
                           ( descs   :: VertexLocationDescriptions )
                           ( strides :: BindingStrides             )
                        .  PipelineConstraints info top descs strides
                        => ShaderPipeline info
                        -> V.Vector Vk.PushConstantRange
                        -> RenderPass -- ^ Must be reference counted since the graphics pipeline keeps an alias to it
                         ⊸ DescriptorPool
                         ⊸ Renderer (RendererPipeline Graphics, RenderPass, DescriptorPool)

destroyPipeline :: RendererPipeline a ⊸ Renderer ()
