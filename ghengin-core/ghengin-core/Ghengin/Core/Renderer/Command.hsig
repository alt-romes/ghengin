signature Ghengin.Core.Renderer.Command where

import Ghengin.Core.Prelude
import Ghengin.Core.Log
import Control.Monad.IO.Class.Linear
import qualified Data.Functor.Linear as Data

import Ghengin.Core.Renderer.Pipeline
import Ghengin.Core.Renderer.Buffer
import Ghengin.Core.Renderer.DescriptorSet
import Ghengin.Core.Renderer.RenderPass

import qualified Control.Functor.Linear as Linear
import qualified Control.Monad.IO.Class.Linear as Linear
import qualified Vulkan as Vk

type RenderPassCmd m = RenderPassCmdM m ()
type Command m = CommandM m ()

type role RenderPassCmdM representational nominal
type RenderPassCmdM :: (Type -> Type) -> Type -> Type
data RenderPassCmdM m a

type role CommandM representational nominal
type CommandM :: (Type -> Type) -> Type -> Type
data CommandM m a

data CommandBuffer

instance Linear.Functor m     => Linear.Functor (CommandM m)
instance Data.Functor m       => Data.Functor (CommandM m)
instance Linear.Applicative m => Linear.Applicative (CommandM m)
instance Data.Applicative m   => Data.Applicative (CommandM m)
instance Linear.Monad m       => Linear.Monad (CommandM m)
instance Linear.MonadIO m     => Linear.MonadIO (CommandM m)
instance HasLogger m          => HasLogger (CommandM m)
instance Linear.MonadTrans CommandM

instance Linear.Functor m     => Linear.Functor (RenderPassCmdM m)
instance Data.Functor m       => Data.Functor (RenderPassCmdM m)
instance Linear.Applicative m => Linear.Applicative (RenderPassCmdM m)
instance Data.Applicative m   => Data.Applicative (RenderPassCmdM m)
instance Linear.Monad m       => Linear.Monad (RenderPassCmdM m)
instance Linear.MonadIO m     => Linear.MonadIO (RenderPassCmdM m)
instance HasLogger m          => HasLogger (RenderPassCmdM m)
instance Linear.MonadTrans RenderPassCmdM

-- the command buffer comes from the leaky
recordCommand :: Linear.MonadIO m => CommandBuffer ⊸ Command m ⊸ m CommandBuffer

-- TODO: Cleanup the API

drawVertexBuffer :: Linear.MonadIO m => VertexBuffer ⊸ RenderPassCmdM m VertexBuffer
drawVertexBufferIndexed :: Linear.MonadIO m => VertexBuffer ⊸ Index32Buffer ⊸ RenderPassCmdM m (VertexBuffer, Index32Buffer)

bindGraphicsPipeline :: Linear.MonadIO m => RendererPipeline Graphics ⊸ RenderPassCmdM m (RendererPipeline Graphics)

bindGraphicsDescriptorSet :: Linear.MonadIO m
                          => RendererPipeline Graphics
                          ⊸ Word32 -- ^ Set index at which to bind the descriptor set
                          -> DescriptorSet ⊸ RenderPassCmdM m (RendererPipeline Graphics, DescriptorSet)

-- leaky, fixme.
setViewport :: Linear.MonadIO m => Vk.Viewport -> RenderPassCmd m
setScissor :: Linear.MonadIO m => Vk.Rect2D -> RenderPassCmd m

renderPassCmd :: Linear.MonadIO m
              => Int -- ^ needs a good explanation...
              -> RenderPass -> Vk.Extent2D -> RenderPassCmd m -> Command m
