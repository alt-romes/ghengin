signature Ghengin.Core.Renderer.Buffer where

import Data.Word (Word, Word32)
import Data.Int (Int32)
import qualified Data.Vector.Storable as SV
-- TODO:Exchange Vk specific types to renderer agnostic enumerations
import qualified Vulkan as Vk (DescriptorType, BufferUsageFlags)

import Ghengin.Core.Mesh.Vertex
import Ghengin.Core.Renderer.Kernel
import Graphics.Gl.Block

{-
Note [Mapped vs Device-local Buffers]
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Mapped buffers are buffers of usage 'UNIFORM' (as in uniform buffer) which are
mapped to a device-local buffer. Writing to a mapped buffer writes host-local
memory which is synchronized automatically to the device-local memory.

It is (probably?) faster to use a mapped buffer if you are writing it a lot.
The alternative is a DeviceLocalBuffer such as a VertexBuffer, which is
allocated on the device without being mapped to host-local memory. To write such
a device-local buffer one needs to allocate a separate mapped buffer called a
staging buffer and then issue a copy command from the staging buffer to the
device-local buffer. Device-local buffers are more performant often, but writing
to them seems much slower.

In Vulkan at least. For some renderers this distinction might not exist...

Note [Block vs Storable]
~~~~~~~~~~~~~~~~~~~~~~~~
We use `Block` constraint when we can make the call about which layout to use down the line.
For MappedBuffer, the (for now) only constructor is Uniform buffer. When
writing into uniform buffers we know what layout to use (std140).

However, for `DeviceLocalBuffer`s, at the moment, we don't know its use, so we
delegate the decision of what standard to use to the definition site of the
`Storable` instance which should in theory be derived via `Std140` or `Std430`
or `Packed` from `gl-block`.

Furthermore, for Vertex buffers, given that (1) we use device local buffers and
(2) when copying data from CPU to the device buffers it's useful to have
storable vectors since they already have the data laid out in memory correctly
and we can simpy memcopy it over. To have a storable vector, we use `Storable`
rather than `Block` and delegate again the decision of what standard to use to
the `Storable` definition site (for `Vertex (...)`, in this case).
-}

-------- Specific buffers --------------

data Index32Buffer where
  Index32Buffer :: !DeviceLocalBuffer
                 ⊸ Word32                 -- ^ N indices
                -> Index32Buffer

createIndex32Buffer :: SV.Vector Int32 -- ^ Indices
                    -> Renderer Index32Buffer

data VertexBuffer where
  VertexBuffer :: !DeviceLocalBuffer
                ⊸ Word32               -- ^ N vertices
               -> VertexBuffer

createVertexBuffer :: ∀ αs. SV.Storable (Vertex αs)
                   => SV.Vector (Vertex αs) -- ^ Vertices
                   -> Renderer VertexBuffer

-------- Device-local buffer -----------

data DeviceLocalBuffer

createDeviceLocalBuffer :: ∀ α. SV.Storable α => Vk.BufferUsageFlags -> SV.Vector α -> Renderer DeviceLocalBuffer

destroyDeviceLocalBuffer :: DeviceLocalBuffer ⊸ Renderer ()

-------- Mapped Buffer -----------------

-- | A mapped (uniform) buffer. See Note [Mapped vs Device-local Buffers]
data MappedBuffer

-- | TODO: Drop dependency on Vulkan and make DescriptorType a data type renderer agnostic
createMappedBuffer :: Word -> Vk.DescriptorType -> Renderer (Alias MappedBuffer)
writeMappedBuffer :: ∀ α. Block α => Alias MappedBuffer ⊸ α -> Renderer (Alias MappedBuffer)


