{-# LANGUAGE LinearTypes #-}
signature Ghengin.Core.Renderer.DescriptorSet where

import Prelude (Int)
import Data.IntMap (IntMap)

import Ghengin.Core.Shader.Pipeline

import Ghengin.Core.Renderer.Kernel
import Ghengin.Core.Renderer.Buffer
import Ghengin.Core.Renderer.Texture

import Data.Counted as Counted

import qualified Unsafe.Linear as Unsafe


-------- Resources ----------------
-- Resources are a part of the descriptor set module since these resources are
-- used to manipulate the descriptors of the descriptor set.
--
-- e.g. a mapped buffer resource can be bound by a descriptor such that using
-- that descriptor in the shader will read the buffer resource

type ResourceMap = IntMap DescriptorResource


data DescriptorResource where
  UniformResource   :: RefC MappedBuffer ⊸ DescriptorResource
  Texture2DResource :: RefC Texture2D ⊸ DescriptorResource

-- ROMES:TODO: These definitions need to be inlined... in the instancing modules?
-- Shouldn't be too inefficient since the use case, ResourceMap, is usually small

-- import Ghengin.Vulkan.DescriptorSet
--     ( allocateDescriptorSet,
--       createDescriptorPool,
--       destroyDescriptorPool,
--       destroyDescriptorSet,
--       DescriptorPool(_set_bindings),
--       DescriptorSet,
--       ResourceMap )

data DescriptorPool

createDescriptorPool :: ShaderPipeline info
                     -> Renderer DescriptorPool


data DescriptorSet
instance Counted DescriptorSet

-- | Allocates a descriptor set whose layout is defined according to the shader
-- pipeline information stored in the descriptor pool.
--
-- Despite the layout matching the shader, there are no resources written/bound
-- to the descriptor set.
--
-- One must call 'updateDescriptorSet' in order to write the resources to the
-- allocated descriptor set.
allocateEmptyDescriptorSet :: Int -- ^ The set to allocate by index
                           -> DescriptorPool-- ^ The descriptor pool associated with a shader pipeline in which the descriptor sets will be used
                           ⊸  Renderer (DescriptorSet, DescriptorPool)

-- | Update a descriptor set according to a set of resources.
--
-- All indices that are not contained in the resource map will remain as they
-- are in the descriptor set, while the bindings that do exist in the resource
-- map will overwrite what was previously written in the descriptor set at
-- those indices.
updateDescriptorSet :: DescriptorSet -- Vk.DescriptorSet -- ^ The descriptor set we're writing with these resources
                    ⊸  ResourceMap               -- ^ The resources we're updating the descriptor set with
                    ⊸  Renderer (DescriptorSet, ResourceMap) -- ^ Returns the updated descriptor set and threads through the resource map used
                                                             -- ROMES: where are the overwritten descriptors being freed?


freeDescriptorSet :: DescriptorSet ⊸ Renderer ()
freeResourceMap :: ResourceMap ⊸ Renderer ()

-- ROMES:TODO: shareResourceMap function, since the fields of ResourceMap are already refcounted?
  
